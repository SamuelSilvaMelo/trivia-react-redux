{"version":3,"sources":["img/aang.png","img/logo.png","services/getTokenApi.js","helper/shuffleArray.js","redux/actions/index.js","components/Login.jsx","components/Countdown.jsx","helper/utils.js","components/QuestionHeader.jsx","components/BooleanQuestion.jsx","components/MultipleChoice.jsx","components/Loading.jsx","components/Question.jsx","components/Avatar.jsx","components/UserAvatar.jsx","pages/Game.jsx","services/apiSettings.js","components/SettingOptions.jsx","pages/Settings.jsx","components/RankingCard.jsx","pages/Feedback.jsx","pages/Ranking.jsx","redux/reducers/loginReducer.js","redux/reducers/questionsReducer.js","redux/reducers/countDownReducer.js","redux/reducers/index.js","redux/store/index.js","index.js","App.js"],"names":["module","exports","getTokenApi","fetch","then","response","json","data","shuffleArray","arr","index","length","replace","Math","floor","random","receiveQuestions","type","showNextBtn","answer","Login","state","userName","email","disabled","handleChange","bind","handleClick","target","name","value","this","setState","checkEmail","test","toLocaleLowerCase","sendUserData","props","token","localStorage","setItem","push","history","src","triviaLogo","className","alt","htmlFor","id","data-testid","onChange","onClick","to","headerImg","userFormLogin","footer","React","Component","connect","dispatch","hash","md5","toString","gravatarImage","getUserData","Countdown","timer","countDownReducer","decodeHtml","html","areaElement","document","createElement","innerHTML","cx","classNames","filter","Boolean","join","QuestionHeader","question","category","BooleanQuestion","showBtn","showAnswer","localStoragePlayerInfo","correctAnswer","incorrectAnswer","correct_answer","difficulty","trueButton","falseButton","questionsReducer","MultipleChoice","answers","map","key","loginReducer","userEmail","Loading","Question","player","assertions","score","gravatarEmail","JSON","stringify","startCounter","showNextButton","stopCountDown","onScoreChange","parse","getItem","difficultyLevel","resetCounter","tickCounter","interval","setInterval","clearInterval","questions","currentQuestion","nextQuestion","maxQuestions","defaultProps","results","Avatar","status","image","Image","onload","onerror","defaultProfileImg","undefined","UserAvatar","Game","success","apiOptions","numberOfQuestions","questionType","a","async","incorrect_answers","requestApiQuestions","nextProps","prevState","categories","difficultyLevels","questionsTypes","SettingOptions","handleOptions","selectAPIOptions","max","min","sendSettings","Settings","href","RankingCard","Feedback","feedbackMessage","Ranking","ranking","newRankingPosition","picture","newRanking","playAgain","sort","b","item","INITIAL_STATE","action","response_code","isFetching","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","path","exact","getElementById"],"mappings":"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","file":"static/js/main.116edaf8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aang.e54bb195.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.1044b039.png\";","const getTokenApi = () => (\n  fetch('https://opentdb.com/api_token.php?command=request')\n    .then((response) => response.json())\n    .then((data) => data));\n\nexport default getTokenApi;\n","// Como embaralhar um Array: https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/\n\nconst shuffleArray = (arr) => {\n  for (let index = arr.length - 1; index > 0; index -= 1) {\n    const replace = Math.floor(Math.random() * (index + 1));\n    [arr[index], arr[replace]] = [arr[replace], arr[index]];\n  }\n  return arr;\n};\n\nexport default shuffleArray;\n","import md5 from 'crypto-js/md5';\nimport shuffleArray from '../../helper/shuffleArray';\n\nexport const USER_DATA = 'USER_DATA';\nexport const SELECT_API_OPTIONS = 'SELECT_API_OPTIONS';\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS';\nexport const SHOW_NEXT_BTN = 'SHOW_NEXT_BTN';\nexport const CHANGE_TO_NEXT_QUESTION = 'CHANGE_TO_NEXT_QUESTION';\nexport const TICK_COUNTDOWN = 'TICK_COUNTDOWN';\nexport const RESET_COUNTDOWN = 'RESET_COUNTDOWN';\nexport const RESTART_GAME = 'RESTART_GAME';\n\nexport const getUserData = (name, email, token) => {\n  const hash = md5(email).toString();\n  return {\n    type: USER_DATA,\n    name,\n    email,\n    token,\n    gravatarImage: `https://www.gravatar.com/avatar/${hash}?d=404`,\n  };\n};\n\nexport const selectAPIOptions = (\n  numberOfQuestions,\n  category,\n  difficulty,\n  questionType,\n) => ({\n  type: SELECT_API_OPTIONS,\n  numberOfQuestions,\n  category,\n  difficulty,\n  questionType,\n});\n\nconst requestQuestions = () => ({\n  type: REQUEST_QUESTIONS,\n});\n\nconst receiveQuestions = (data) => ({\n  type: RECEIVE_QUESTIONS,\n  data,\n});\n\nexport const requestApiQuestions = (\n  token,\n  {\n    numberOfQuestions,\n    category,\n    difficulty,\n    questionType,\n  },\n) => async (dispatch) => {\n  await dispatch(requestQuestions());\n  return fetch(`https://opentdb.com/api.php?amount=${numberOfQuestions}&token=${token}&category=${category}&difficulty=${difficulty}&type=${questionType}`)\n    .then((response) => response.json())\n    .then((data) => {\n      dispatch(\n        receiveQuestions({\n          ...data,\n          results: data.results.map((question) => ({\n            ...question,\n            answers: shuffleArray([\n              question.correct_answer,\n              ...question.incorrect_answers,\n            ]),\n          })),\n        }),\n      );\n    });\n};\n\nexport const showNextBtn = (answer) => ({\n  type: SHOW_NEXT_BTN,\n  answer,\n});\n\nexport const changeToNextQuestion = () => ({\n  type: CHANGE_TO_NEXT_QUESTION,\n});\n\nexport const tickCountdown = () => ({\n  type: TICK_COUNTDOWN,\n});\n\nexport const resetCountdown = () => ({\n  type: RESET_COUNTDOWN,\n});\n\nexport const restartGame = () => ({\n  type: RESTART_GAME,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport getTokenApi from '../services/getTokenApi';\nimport { getUserData } from '../redux/actions';\nimport '../styles/components/Login.css';\nimport triviaLogo from '../img/logo.png';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userName: '',\n      email: '',\n      disabled: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState(\n      {\n        [name]: value,\n      },\n      () => {\n        const { userName, email } = this.state;\n        // REGEX VALIDATION REFERENCES\n        // https://stackoverflow.com/questions/46155/how-to-validate-an-email-address-in-javascript\n        // https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n        // https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\n        const emailRegex = /[a-z0-9._-]+@[a-z0-9]+\\.[a-z]+$/i;\n        const checkEmail = emailRegex.test(email.toLocaleLowerCase());\n        if (userName && checkEmail) {\n          this.setState({\n            disabled: false,\n          });\n        } else {\n          this.setState({\n            disabled: true,\n          });\n        }\n      },\n    );\n  }\n\n  async handleClick() {\n    const { userName, email } = this.state;\n    const { sendUserData } = this.props;\n    const response = await getTokenApi();\n    const { token } = response;\n    localStorage.setItem('token', token);\n    sendUserData(userName, email, token);\n    const { history: { push } } = this.props;\n    push('/game');\n  }\n\n  headerImg() {\n    return (\n      <img\n        src={ triviaLogo }\n        className=\"login-logo\"\n        alt=\"logo trivia star\"\n      />\n    );\n  }\n\n  userFormLogin() {\n    const { userName, email, disabled } = this.state;\n    return (\n      <form className=\"login-form\">\n        <label className=\"login-label\" htmlFor=\"name\">\n          NAME:\n          <input\n            className=\"login-input\"\n            type=\"text\"\n            id=\"name\"\n            name=\"userName\"\n            value={ userName }\n            data-testid=\"input-player-name\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label className=\"login-label\" htmlFor=\"email\">\n          EMAIL:\n          <input\n            className=\"login-input\"\n            type=\"text\"\n            id=\"email\"\n            name=\"email\"\n            value={ email }\n            data-testid=\"input-gravatar-email\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <button\n          className=\"login-button\"\n          type=\"button\"\n          data-testid=\"btn-play\"\n          disabled={ disabled }\n          onClick={ () => this.handleClick() }\n        >\n          PLAY\n        </button>\n      </form>\n    );\n  }\n\n  footer() {\n    return (\n      <footer className=\"login-footer\">\n        <Link\n          className=\"login-footer-link\"\n          data-testid=\"btn-settings\"\n          to=\"/settings\"\n        >\n          SETTINGS\n        </Link>\n      </footer>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"login-root\">\n        { this.headerImg() }\n        { this.userFormLogin() }\n        { this.footer() }\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendUserData: (name, email, token) => dispatch(getUserData(name, email, token)),\n});\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  sendUserData: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Countdown extends React.Component {\n  render() {\n    const dangerTime = 10;\n    const { timer } = this.props;\n    return (\n      <div>\n        <h3 className={ timer <= dangerTime ? 'timer timer-danger' : 'timer' }>\n          {timer}\n        </h3>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  timer: state.countDownReducer.timer,\n});\n\nCountdown.propTypes = {\n  timer: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Countdown);\n","// https://stackoverflow.com/questions/9244824/how-to-remove-quot-from-my-json-in-javascript/39619252\nexport function decodeHtml(html) {\n  const areaElement = document.createElement('textarea');\n  areaElement.innerHTML = html;\n\n  return areaElement.value;\n}\n\nexport function cx(...classNames) {\n  return classNames.filter(Boolean).join(' ');\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Countdown from './Countdown';\nimport { decodeHtml } from '../helper/utils';\n\nclass QuestionHeader extends React.Component {\n  render() {\n    const { question } = this.props;\n    return (\n      <header className=\"question-header\">\n        <div\n          data-testid=\"question-category\"\n          className=\"question-header-category\"\n        >\n          {decodeHtml(question.category)}\n        </div>\n        <div data-testid=\"question-text\" className=\"question-header-question\">\n          {decodeHtml(question.question)}\n        </div>\n        <div className=\"question-header-countdown-wrapper\">\n          <Countdown />\n        </div>\n      </header>\n    );\n  }\n}\n\nQuestionHeader.propTypes = {\n  question: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string,\n  }).isRequired,\n};\n\nexport default QuestionHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { showNextBtn } from '../redux/actions';\n\nclass BooleanQuestion extends React.Component {\n  trueButton() {\n    const {\n      question,\n      showBtn,\n      disabled,\n      showAnswer,\n      timer,\n      localStoragePlayerInfo,\n    } = this.props;\n    const correctAnswer = (showAnswer) ? 'show-correct-answer' : null;\n    const incorrectAnswer = (showAnswer) ? 'show-incorrect-answer' : null;\n    return (\n      <button\n        className={\n          (question.correct_answer === 'True')\n            ? correctAnswer\n            : incorrectAnswer\n        }\n        disabled={ disabled }\n        type=\"button\"\n        data-testid={\n          (question.correct_answer === 'True')\n            ? 'correct-answer'\n            : 'wrong-answer'\n        }\n        onClick={ () => {\n          if (question.correct_answer === 'True') {\n            localStoragePlayerInfo(timer, question.difficulty);\n            showBtn();\n          }\n          showBtn();\n        } }\n      >\n        True\n      </button>\n    );\n  }\n\n  falseButton() {\n    const {\n      question,\n      showBtn,\n      disabled,\n      showAnswer,\n      timer,\n      localStoragePlayerInfo,\n    } = this.props;\n    const correctAnswer = (showAnswer) ? 'show-correct-answer' : null;\n    const incorrectAnswer = (showAnswer) ? 'show-incorrect-answer' : null;\n    return (\n      <button\n        className={\n          (question.correct_answer === 'False')\n            ? correctAnswer\n            : incorrectAnswer\n        }\n        disabled={ disabled }\n        type=\"button\"\n        data-testid={\n          (question.correct_answer === 'False')\n            ? 'correct-answer'\n            : 'wrong-answer'\n        }\n        onClick={ () => {\n          if (question.correct_answer === 'False') {\n            localStoragePlayerInfo(timer, question.difficulty);\n            showBtn();\n          }\n          showBtn();\n        } }\n      >\n        False\n      </button>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        { this.trueButton() }\n        { this.falseButton() }\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  showBtn: () => dispatch(showNextBtn()),\n});\n\nconst mapStateToProps = (state) => ({\n  showAnswer: state.questionsReducer.showBtn,\n  timer: state.countDownReducer.timer,\n});\n\nBooleanQuestion.propTypes = {\n  question: PropTypes.shape({\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n    difficulty: PropTypes.string.isRequired,\n  }).isRequired,\n  showBtn: PropTypes.func.isRequired,\n  disabled: (PropTypes.bool).isRequired,\n  showAnswer: PropTypes.bool.isRequired,\n  timer: PropTypes.number.isRequired,\n  localStoragePlayerInfo: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooleanQuestion);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { showNextBtn } from '../redux/actions';\nimport { decodeHtml } from '../helper/utils';\n\nclass MultipleChoice extends React.Component {\n  render() {\n    const {\n      question,\n      showBtn,\n      disabled,\n      showAnswer,\n      localStoragePlayerInfo,\n      timer,\n    } = this.props;\n    return question.answers.map((answer, index) => {\n      if (question.correct_answer === answer) {\n        return (\n          <button\n            className={ showAnswer ? 'show-correct-answer' : null }\n            disabled={ disabled }\n            data-testid=\"correct-answer\"\n            key={ index }\n            type=\"button\"\n            onClick={ () => {\n              localStoragePlayerInfo(timer, question.difficulty);\n              showBtn();\n            } }\n          >\n            {decodeHtml(answer)}\n          </button>\n        );\n      }\n      return (\n        <button\n          className={ showAnswer ? 'show-incorrect-answer' : null }\n          disabled={ disabled }\n          data-testid={ `wrong-answer-${index}` }\n          key={ index }\n          type=\"button\"\n          onClick={ () => showBtn() }\n        >\n          {decodeHtml(answer)}\n        </button>\n      );\n    });\n  }\n}\nconst mapStateToProps = (state) => ({\n  userName: state.loginReducer.name,\n  userEmail: state.loginReducer.email,\n  showAnswer: state.questionsReducer.showBtn,\n  timer: state.countDownReducer.timer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  showBtn: () => dispatch(showNextBtn()),\n});\n\nMultipleChoice.propTypes = {\n  question: PropTypes.shape({\n    answers: PropTypes.arrayOf(PropTypes.string),\n    correct_answer: PropTypes.string,\n    difficulty: PropTypes.string.isRequired,\n  }).isRequired,\n  showBtn: PropTypes.func.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  showAnswer: PropTypes.bool.isRequired,\n  timer: PropTypes.number.isRequired,\n  localStoragePlayerInfo: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultipleChoice);\n","import React from 'react';\n\nclass Loading extends React.Component {\n  render() {\n    return (\n      <div>\n        Loading...\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  changeToNextQuestion,\n  resetCountdown,\n  tickCountdown,\n  showNextBtn,\n} from '../redux/actions';\nimport QuestionHeader from './QuestionHeader';\nimport BooleanQuestion from './BooleanQuestion';\nimport MultipleChoice from './MultipleChoice';\nimport Loading from './Loading';\nimport '../styles/components/Question.css';\n\nconst INTERVAL = 1000;\nclass Question extends React.Component {\n  componentDidMount() {\n    const { userName, userEmail } = this.props;\n    const state = {\n      player: {\n        name: userName,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: userEmail,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n    this.startCounter();\n    this.localStoragePlayerInfo = this.localStoragePlayerInfo.bind(this);\n  }\n\n  componentDidUpdate() {\n    const { timer, showBtn, showNextButton } = this.props;\n\n    if (timer === 0 || showBtn) {\n      this.stopCountDown();\n      showNextButton();\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopCountDown();\n  }\n\n  localStoragePlayerInfo(timer, difficulty) {\n    const { onScoreChange } = this.props;\n    const state = JSON.parse(localStorage.getItem('state'));\n\n    const startScore = 10;\n    const difficultyLevel = { hard: 3, medium: 2, easy: 1 };\n    if (difficulty === 'hard') {\n      state.player.score += startScore + difficultyLevel.hard * timer;\n      state.player.assertions += 1;\n    }\n    if (difficulty === 'medium') {\n      state.player.score += startScore + difficultyLevel.medium * timer;\n      state.player.assertions += 1;\n    }\n    if (difficulty === 'easy') {\n      state.player.score += startScore + difficultyLevel.easy * timer;\n      state.player.assertions += 1;\n    }\n\n    localStorage.setItem('state', JSON.stringify(state));\n\n    onScoreChange(state.player.score);\n  }\n\n  startCounter() {\n    const { resetCounter, tickCounter } = this.props;\n\n    resetCounter();\n    this.interval = setInterval(() => tickCounter(), INTERVAL);\n  }\n\n  stopCountDown() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const { questions, showBtn, currentQuestion, nextQuestion, push } = this.props;\n    const maxQuestions = questions.length - 1;\n    return (\n      <section className=\"game-card\">\n        {questions[currentQuestion] ? (\n          <>\n            <QuestionHeader question={ questions[currentQuestion] } />\n            <div className=\"answer-options\">\n              {questions[currentQuestion].type === 'boolean' ? (\n                <BooleanQuestion\n                  disabled={ showBtn }\n                  question={ questions[currentQuestion] }\n                  localStoragePlayerInfo={ this.localStoragePlayerInfo }\n                />\n              ) : (\n                <MultipleChoice\n                  disabled={ showBtn }\n                  question={ questions[currentQuestion] }\n                  localStoragePlayerInfo={ this.localStoragePlayerInfo }\n                />\n              )}\n            </div>\n            <button\n              data-testid=\"btn-next\"\n              type=\"button\"\n              className={ showBtn ? 'pretty-button show-btn' : 'hide-btn' }\n              onClick={ () => {\n                if (currentQuestion === maxQuestions) {\n                  push('/feedback');\n                } else {\n                  this.startCounter();\n                  nextQuestion();\n                }\n              } }\n            >\n              NEXT QUESTION\n            </button>\n          </>\n        ) : (\n          <Loading />\n        )}\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.questionsReducer.results,\n  showBtn: state.questionsReducer.showBtn,\n  currentQuestion: state.questionsReducer.currentQuestion,\n  timer: state.countDownReducer.timer,\n  userName: state.loginReducer.name,\n  userEmail: state.loginReducer.email,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  nextQuestion: () => dispatch(changeToNextQuestion()),\n  resetCounter: () => dispatch(resetCountdown()),\n  tickCounter: () => dispatch(tickCountdown()),\n  showNextButton: () => dispatch(showNextBtn()),\n});\n\nQuestion.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  showBtn: PropTypes.bool.isRequired,\n  currentQuestion: PropTypes.number.isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n  timer: PropTypes.number.isRequired,\n  resetCounter: PropTypes.func.isRequired,\n  tickCounter: PropTypes.func.isRequired,\n  showNextButton: PropTypes.func.isRequired,\n  userName: PropTypes.string.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  push: PropTypes.func.isRequired,\n  onScoreChange: PropTypes.func.isRequired,\n};\n\nQuestion.defaultProps = {\n  questions: [{}],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/components/Avatar.css';\nimport defaultProfileImg from '../img/aang.png';\n\nclass Avatar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { status: 'loading' };\n  }\n\n  componentDidMount() {\n    const { gravatarImage } = this.props;\n    const image = new Image();\n\n    image.onload = () => this.setState({ status: 'loaded' });\n    image.onerror = () => this.setState({ status: 'error' });\n\n    image.src = gravatarImage;\n  }\n\n  render() {\n    const { status } = this.state;\n    const { userName, gravatarImage, className = '' } = this.props;\n\n    if (status === 'loading') {\n      return (\n        <div\n          data-testid=\"header-player-name\"\n          className={ `${className} avatar-loading` }\n        />);\n    }\n\n    if (status === 'error') {\n      return (\n        <img\n          className={ `${className} avatar-image` }\n          data-testid=\"header-profile-picture\"\n          src={ defaultProfileImg }\n          alt={ userName }\n        />\n      );\n    }\n\n    return (\n      <img\n        className={ `${className} avatar-image` }\n        data-testid=\"header-profile-picture\"\n        src={ gravatarImage }\n        alt={ userName }\n      />\n    );\n  }\n}\n\nAvatar.propTypes = {\n  className: PropTypes.string,\n  userName: PropTypes.string,\n  gravatarImage: PropTypes.string.isRequired,\n};\n\nAvatar.defaultProps = {\n  className: undefined,\n  userName: undefined,\n};\n\nexport default Avatar;\n\n// A imagem do perfil vinda do Gravatar em um elemento que deve possuir o atributo data-testid com o valor header-profile-picture\n// O nome da pessoa em um elemento que deve possuir o atributo data-testid com o valor header-player-name\n// O placar zerado em um elemento que deve possuir o atributo data-testid com o valor header-score\n","import { connect } from 'react-redux';\nimport Avatar from './Avatar';\n\nconst mapStateToProps = (state) => ({\n  userName: state.loginReducer.userName,\n  gravatarImage: state.loginReducer.gravatarImage,\n});\n\nconst UserAvatar = connect(mapStateToProps)(Avatar);\n\nexport default UserAvatar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Question from '../components/Question';\nimport { requestApiQuestions } from '../redux/actions';\nimport UserAvatar from '../components/UserAvatar';\nimport { cx } from '../helper/utils';\nimport '../styles/pages/Game.css';\nimport triviaLogo from '../img/logo.png';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { score: 0, success: false };\n    this.onScoreChange = this.onScoreChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { dispatch, apiOptions } = this.props;\n    const token = localStorage.getItem('token');\n    dispatch(requestApiQuestions(token, apiOptions));\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return { success: nextProps.showBtn ? prevState.success : false };\n  }\n\n  onScoreChange(score) {\n    this.setState({\n      score,\n      success: true,\n    });\n  }\n\n  render() {\n    const { score, success } = this.state;\n    const {\n      userName,\n      history: { push },\n    } = this.props;\n\n    return (\n      <>\n        <img\n          className=\"all-pages-logo\"\n          src={ triviaLogo }\n          alt=\"logo trivia\"\n        />\n        <div className=\"game-content\">\n          <div className=\"game-user-header\">\n            <div className=\"game-user-header-user\">\n              <UserAvatar className=\"game-user-header-avatar\" />\n              <div data-testid=\"header-player-name\" className=\"game-user-header-name\">\n                {userName || 'username'}\n              </div>\n            </div>\n            <div\n              className={ cx('game-user-header-score', success && 'success') }\n            >\n              <span data-testid=\"header-score\">{ score }</span>\n            </div>\n          </div>\n          <main>\n            <Question push={ push } onScoreChange={ this.onScoreChange } />\n          </main>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  showBtn: state.questionsReducer.showBtn,\n  apiOptions: state.questionsReducer.apiOptions,\n  userName: state.loginReducer.name,\n});\n\nGame.propTypes = {\n  showBtn: PropTypes.bool.isRequired,\n  userName: PropTypes.string,\n  dispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  apiOptions: PropTypes.shape({\n    numberOfQuestions: PropTypes.string,\n    category: PropTypes.string,\n    difficulty: PropTypes.string,\n    questionType: PropTypes.string,\n  }).isRequired,\n};\n\nGame.defaultProps = {\n  userName: undefined,\n};\n\nexport default connect(mapStateToProps)(Game);\n\n// A imagem do perfil vinda do Gravatar em um elemento que deve possuir o atributo data-testid com o valor header-profile-picture\n// O nome da pessoa em um elemento que deve possuir o atributo data-testid com o valor header-player-name\n// O placar zerado em um elemento que deve possuir o atributo data-testid com o valor header-score\n","export const categories = [\n  { category: 'Any Category', value: '' },\n  { category: 'General Knowledge', value: 9 },\n  { category: 'Entertainment: Books', value: 10 },\n  { category: 'Entertainment: Film', value: 11 },\n  { category: 'Entertainment: Music', value: 12 },\n  { category: 'Entertainment: Musicals & Theatres', value: 13 },\n  { category: 'Entertainment: Television', value: 14 },\n  { category: 'Entertainment: Video Games', value: 15 },\n  { category: 'Entertainment: Board Games', value: 16 },\n  { category: 'Science & Nature', value: 17 },\n  { category: 'Science: Computers', value: 18 },\n  { category: 'Science: Mathematics', value: 19 },\n  { category: 'Mythology', value: 20 },\n  { category: 'Sports', value: 21 },\n  { category: 'Geography', value: 22 },\n  { category: 'History', value: 23 },\n  { category: 'Politics', value: 24 },\n  { category: 'Art', value: 25 },\n  { category: 'Celebrities', value: 26 },\n  { category: 'Animals', value: 27 },\n  { category: 'Vehicles', value: 28 },\n  { category: 'Entertainment: Comics', value: 29 },\n  { category: 'Science: Gadgets', value: 30 },\n  { category: 'Entertainment: Japanese Anime & Manga', value: 31 },\n  { category: 'Entertainment: Cartoon & Animations', value: 32 },\n];\n\nexport const difficultyLevels = [\n  { difficulty: 'Any', value: '' },\n  { difficulty: 'Easy', value: 'easy' },\n  { difficulty: 'Medium', value: 'medium' },\n  { difficulty: 'Hard', value: 'hard' },\n];\n\nexport const questionsTypes = [\n  { type: 'Any Type', value: '' },\n  { type: 'Multiple Choice', value: 'multiple' },\n  { type: 'True / False', value: 'boolean' },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { categories, difficultyLevels, questionsTypes } from '../services/apiSettings';\nimport { selectAPIOptions } from '../redux/actions';\n\nclass SettingOptions extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      numberOfQuestions: '5',\n      category: '',\n      difficulty: '',\n      questionType: '',\n    };\n\n    this.handleOptions = this.handleOptions.bind(this);\n  }\n\n  handleOptions({ target }) {\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  sendSettings() {\n    const { dispatch, push } = this.props;\n    const {\n      numberOfQuestions,\n      category,\n      difficulty,\n      questionType,\n    } = this.state;\n\n    dispatch(selectAPIOptions(numberOfQuestions, category, difficulty, questionType));\n    push('/');\n  }\n\n  render() {\n    const { numberOfQuestions } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"number-of-questions\">\n          Number of Questions:\n          <input\n            id=\"number-of-questions\"\n            max=\"50\"\n            min=\"1\"\n            name=\"numberOfQuestions\"\n            onChange={ this.handleOptions }\n            type=\"number\"\n            value={ numberOfQuestions }\n          />\n        </label>\n        <label htmlFor=\"select-category\">\n          Select Category:\n          <select id=\"select-category\" name=\"category\" onChange={ this.handleOptions }>\n            { categories.map(({ category, value }) => (\n              <option key={ value } value={ value }>{ category }</option>)) }\n          </select>\n        </label>\n        <label htmlFor=\"difficulty\">\n          Select Difficulty:\n          <select id=\"difficulty\" name=\"difficulty\" onChange={ this.handleOptions }>\n            { difficultyLevels.map(({ difficulty, value }) => (\n              <option key={ value } value={ value }>{ difficulty }</option>)) }\n          </select>\n        </label>\n        <label htmlFor=\"type\">\n          Select Type:\n          <select id=\"type\" name=\"questionType\" onChange={ this.handleOptions }>\n            { questionsTypes.map(({ type, value }) => (\n              <option key={ value } value={ value }>{ type }</option>)) }\n          </select>\n        </label>\n        <button\n          className=\"pretty-button\"\n          type=\"button\"\n          onClick={ () => this.sendSettings() }\n        >\n          Send\n        </button>\n      </div>\n    );\n  }\n}\n\nSettingOptions.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  push: PropTypes.func.isRequired,\n};\n\nexport default connect()(SettingOptions);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SettingOptions from '../components/SettingOptions';\nimport '../styles/pages/Settings.css';\nimport triviaLogo from '../img/logo.png';\n\nclass Settings extends React.Component {\n  render() {\n    const { history: { push } } = this.props;\n    return (\n      <>\n        <header>\n          <a href=\"/trivia-react-redux/\">\n            <img\n              className=\"all-pages-logo\"\n              src={ triviaLogo }\n              alt=\"logo trivia\"\n            />\n          </a>\n          <h1 className=\"pretty-title\" data-testid=\"settings-title\">Settings</h1>\n        </header>\n        <main className=\"setting-options\">\n          <SettingOptions push={ push } />\n        </main>\n      </>\n    );\n  }\n}\n\nSettings.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default Settings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Avatar from './Avatar';\nimport '../styles/components/RankingCard.css';\n\nclass RankingCard extends React.Component {\n  render() {\n    const { userName, gravatarImage, score, assertions } = this.props;\n    return (\n      <div className=\"ranking-card\">\n        <header className=\"ranking-card-header\">\n          <div className=\"ranking-card-user\">\n            <Avatar userName={ userName } gravatarImage={ gravatarImage } />\n            <p\n              className=\"ranking-card-user-name\"\n              data-testid=\"header-player-name\"\n            >\n              {userName}\n            </p>\n          </div>\n          <div className=\"ranking-card-total-score\">\n            <p>Points:</p>\n            <p\n              className=\"ranking-card-score\"\n              data-testid=\"header-score\"\n            >\n              {score}\n            </p>\n            <p>\n              Assertions\n              <span data-testid=\"feedback-total-question\">{` ${assertions}`}</span>\n            </p>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nRankingCard.propTypes = {\n  userName: PropTypes.string.isRequired,\n  gravatarImage: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number,\n};\n\nRankingCard.defaultProps = {\n  assertions: undefined,\n};\n\nexport default RankingCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport '../styles/pages/Feedback.css';\nimport RankingCard from '../components/RankingCard';\nimport triviaLogo from '../img/logo.png';\n\nclass Feedback extends React.Component {\n  feedbackMessage() {\n    const state = JSON.parse(localStorage.getItem('state'));\n    const NUMBER_TREE = 3;\n    if (state.player.assertions < NUMBER_TREE) {\n      return 'You\\'ll do better next time!';\n    }\n    return 'VERY GOOD!';\n  }\n\n  render() {\n    const state = JSON.parse(localStorage.getItem('state'));\n    const { userName, gravatarImage } = this.props;\n    return (\n      <>\n        <a href=\"/trivia-react-redux/\">\n          <img\n            className=\"all-pages-logo\"\n            src={ triviaLogo }\n            alt=\"logo trivia\"\n          />\n        </a>\n\n        <RankingCard\n          userName={ userName }\n          gravatarImage={ gravatarImage }\n          score={ state.player.score }\n          assertions={ state.player.assertions }\n        />\n        <p className=\"feedback-message\" data-testid=\"feedback-text\">\n          {this.feedbackMessage()}\n        </p>\n        <div className=\"feedback-buttons\">\n          <Link\n            className=\"pretty-button\"\n            data-testid=\"btn-ranking\"\n            to=\"/ranking\"\n          >\n            Ranking\n          </Link>\n          <Link to=\"/\">\n            <button\n              className=\"pretty-button\"\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n            >\n              Play Again!\n            </button>\n          </Link>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userName: state.loginReducer.name,\n  gravatarImage: state.loginReducer.gravatarImage,\n});\n\nFeedback.propTypes = {\n  userName: PropTypes.string.isRequired,\n  gravatarImage: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Feedback);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { restartGame } from '../redux/actions';\nimport RankingCard from '../components/RankingCard';\nimport '../styles/pages/Ranking.css';\nimport triviaLogo from '../img/logo.png';\n\nclass Ranking extends React.Component {\n  constructor(props) {\n    super(props);\n    const { userName, gravatarImage } = props;\n\n    const state = JSON.parse(localStorage.getItem('state'));\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n\n    const newRankingPosition = {\n      name: userName,\n      score: state.player.score,\n      picture: gravatarImage,\n    };\n\n    if (ranking) {\n      const newRanking = [...ranking, newRankingPosition];\n      localStorage.setItem('ranking', JSON.stringify(newRanking));\n    }\n    if (!ranking) {\n      localStorage.setItem('ranking', JSON.stringify([newRankingPosition]));\n    }\n  }\n\n  render() {\n    const { playAgain } = this.props;\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    return (\n      <>\n        <a href=\"/trivia-react-redux/\">\n          <img\n            className=\"all-pages-logo\"\n            src={ triviaLogo }\n            alt=\"logo trivia\"\n          />\n        </a>\n        <header>\n          <h1 className=\"pretty-title\" data-testid=\"ranking-title\">\n            Ranking\n          </h1>\n        </header>\n        <main>\n          {ranking ? (\n            <ul className=\"ranking-list\">\n              {ranking\n                .sort((a, b) => b.score - a.score)\n                .map((item, index) => (\n                  <li key={ index }>\n                    <RankingCard\n                      userName={ item.name }\n                      gravatarImage={ item.picture }\n                      score={ item.score }\n                    />\n                  </li>\n                ))}\n            </ul>\n          ) : (\n            <div>Loading...</div>\n          )}\n          <Link\n            className=\"pretty-button\"\n            data-testid=\"btn-go-home\"\n            to=\"/\"\n            onClick={ () => playAgain() }\n          >\n            Home\n          </Link>\n        </main>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userName: state.loginReducer.name,\n  gravatarImage: state.loginReducer.gravatarImage,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  playAgain: () => dispatch(restartGame()),\n});\n\nRanking.propTypes = {\n  userName: PropTypes.string.isRequired,\n  gravatarImage: PropTypes.string.isRequired,\n  playAgain: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\n","import { USER_DATA } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n  token: '',\n  gravatarImage: '',\n};\n\nconst loginReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case USER_DATA:\n    return {\n      ...state,\n      name: action.name,\n      email: action.email,\n      token: action.token,\n      gravatarImage: action.gravatarImage,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default loginReducer;\n","import {\n  SELECT_API_OPTIONS,\n  REQUEST_QUESTIONS,\n  RECEIVE_QUESTIONS,\n  SHOW_NEXT_BTN,\n  CHANGE_TO_NEXT_QUESTION,\n  RESTART_GAME,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  response_code: '',\n  apiOptions: {\n    numberOfQuestions: '5',\n    category: '',\n    difficulty: '',\n    questionType: '',\n  },\n  results: [],\n  isFetching: false,\n  currentQuestion: 0,\n  showBtn: false,\n};\n\nconst questionsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SELECT_API_OPTIONS:\n    return {\n      ...state,\n      apiOptions: {\n        numberOfQuestions: action.numberOfQuestions,\n        category: action.category,\n        difficulty: action.difficulty,\n        questionType: action.questionType,\n      },\n    };\n  case REQUEST_QUESTIONS:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_QUESTIONS:\n    return {\n      ...state,\n      response_code: action.data.response_code,\n      results: action.data.results,\n      isFetching: false,\n    };\n  case SHOW_NEXT_BTN:\n    return {\n      ...state,\n      showBtn: true,\n    };\n  case CHANGE_TO_NEXT_QUESTION:\n    return {\n      ...state,\n      currentQuestion: state.currentQuestion + 1,\n      showBtn: false,\n    };\n  case RESTART_GAME:\n    return {\n      ...INITIAL_STATE,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default questionsReducer;\n","import { TICK_COUNTDOWN, CHANGE_TO_NEXT_QUESTION, RESET_COUNTDOWN } from '../actions';\n\nconst INITIAL_STATE = {\n  timer: 30,\n};\n\nconst countDownReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case TICK_COUNTDOWN:\n    return { ...state, timer: state.timer - 1 };\n  case RESET_COUNTDOWN:\n  case CHANGE_TO_NEXT_QUESTION:\n    return { ...state, timer: 30 };\n  default:\n    return state;\n  }\n};\n\nexport default countDownReducer;\n","import { combineReducers } from 'redux';\nimport loginReducer from './loginReducer';\nimport questionsReducer from './questionsReducer';\nimport countDownReducer from './countDownReducer';\n\nconst rootReducer = combineReducers({ loginReducer, questionsReducer, countDownReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/trivia-react-redux\">\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n\n  document.getElementById('root'),\n);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './styles/App.css';\nimport Login from './components/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route\n          path=\"/feedback\"\n          render={ () => <Feedback /> }\n        />\n        <Route\n          path=\"/settings\"\n          render={ (props) => <Settings { ...props } /> }\n        />\n        <Route\n          path=\"/ranking\"\n          render={ () => <Ranking /> }\n        />\n        <Route\n          path=\"/game\"\n          render={ (props) => <Game { ...props } /> }\n        />\n        <Route\n          exact\n          path=\"/\"\n          render={ (props) => <Login { ...props } /> }\n        />\n      </Switch>\n    </div>\n  );\n}\n"],"sourceRoot":""}